# rust nightly docker image is currently broken for this project.
# Use a known, good nightly version. Since there are no docker images for specific nightly versions, build from
# scratch, using the same commands as the rust docker image with
# - specific nightly version that works (see RUST_TOOLCHAIN)
# - Added openssl, libssl-dev and pkg-config packages to compile native-tls
# FROM rustlang/rust:${RUST_TOOLCHAIN}
FROM debian:stretch-slim

ARG RUST_TOOLCHAIN=nightly-2020-06-09

ENV RUSTUP_HOME=/usr/local/rustup \
    CARGO_HOME=/usr/local/cargo \
    PATH=/usr/local/cargo/bin:$PATH \
    RUST_TOOLCHAIN=$RUST_TOOLCHAIN

RUN set -eux; \
    apt-get update; \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        gcc \
        libc6-dev \
        wget \
        openssl \
        libssl-dev \
        pkg-config \
        ; \
    \
    url="https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init"; \
    wget "$url"; \
    chmod +x rustup-init; \
    ./rustup-init -y --no-modify-path --default-toolchain nightly; \
    rm rustup-init; \
    chmod -R a+w $RUSTUP_HOME $CARGO_HOME; \
    rustup toolchain install $RUST_TOOLCHAIN; \
    rustup default $RUST_TOOLCHAIN; \
    rustup --version; \
    cargo --version; \
    rustc --version; \
    cargo install cargo2junit; \
    \
    apt-get remove -y --auto-remove \
        wget \
        ; \
    rm -rf /var/lib/apt/lists/*;

# required to workaround a current issue with rustfmt-nightly
ENV CFG_RELEASE=nightly
ENV CFG_RELEASE_CHANNEL=nightly

# create app directory
WORKDIR /usr/src/elasticsearch-rs

# copy just enough to build dependencies
COPY .ci/certs ./.ci/certs
COPY Cargo.toml ./Cargo.toml
COPY README.md ./README.md
COPY elasticsearch/Cargo.toml ./elasticsearch/Cargo.toml
COPY api_generator/Cargo.toml ./api_generator/Cargo.toml
COPY yaml_test_runner/Cargo.toml ./yaml_test_runner/Cargo.toml

# cache dependencies
RUN mkdir -p elasticsearch/src; \
echo "// dummy file" > elasticsearch/src/lib.rs; \
mkdir -p api_generator/src; \
echo "// dummy file" > api_generator/src/lib.rs; \
mkdir -p yaml_test_runner/src; \
echo "// dummy file" > yaml_test_runner/src/main.rs; \
cargo build --tests; \
rm elasticsearch/src/lib.rs; \
rm api_generator/src/lib.rs; \
rm yaml_test_runner/src/main.rs;

# copy all source
COPY elasticsearch/src ./elasticsearch/src
COPY elasticsearch/build.rs ./elasticsearch/build.rs
COPY api_generator ./api_generator
COPY yaml_test_runner ./yaml_test_runner

# build
RUN rm ./target/debug/deps/api_generator*; \
rm ./target/debug/deps/elasticsearch*; \
rm ./target/debug/deps/yaml_test_runner*; \
cargo build --tests;