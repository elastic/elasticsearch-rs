[config]
default_to_workspace = false

[env]
# Determines the version of Elasticsearch docker container used
STACK_VERSION = "8.0.0-SNAPSHOT"
# Determines the distribution of docker container used. Either xpack or oss
TEST_SUITE = "xpack"

[tasks.set-oss-env]
category = "Elasticsearch"
description = "Sets ELASTICSEARCH_URL environment variable if not already set for later tasks when oss test suite used"
private = true
condition = { env = { "TEST_SUITE" = "oss" }, env_not_set = ["ELASTICSEARCH_URL"] }
env = { "ELASTICSEARCH_URL" = "http://localhost:9200" }

[tasks.set-xpack-env]
category = "Elasticsearch"
description = "Sets ELASTICSEARCH_URL environment variable if not already set for later tasks when xpack test suite used"
private = true
condition = { env = { "TEST_SUITE" = "xpack" }, env_not_set = ["ELASTICSEARCH_URL"] }
env = { "ELASTICSEARCH_URL" = "https://elastic:changeme@localhost:9200" }

[tasks.run-yaml-test-runner]
category = "Elasticsearch"
description = '''
Runs yaml_test_runner package to generate tests from yaml files for a given Elasticsearch commit.
The commit to use is retrieved from the running Elasticsearch instance
'''
private = true
script = ["cargo run -p yaml_test_runner -- -u ${ELASTICSEARCH_URL}"]
dependencies = ["start-elasticsearch"]

[tasks.run-yaml-test-runner.windows]
script = ["cargo run -p yaml_test_runner -- -u %ELASTICSEARCH_URL%"]

[tasks.test-yaml-test-runner]
category = "Elasticsearch"
private = true
condition = { env_set = [ "ELASTICSEARCH_URL" ], env_not_set = ["CI"] }
command = "cargo"
args = ["test", "-p", "yaml_test_runner", "--", "--test-threads=1"]
dependencies = ["generate-yaml-tests"]

[tasks.test-yaml-test-runner-ci]
category = "Elasticsearch"
private = true
condition = { env_set = [ "ELASTICSEARCH_URL", "CI" ] }
script = ["cargo test -p yaml_test_runner -- --test-threads=1 -Z unstable-options --format json | tee test_results/results.json"]
dependencies = ["generate-yaml-tests"]

[tasks.test-elasticsearch]
category = "Elasticsearch"
private = true
condition = { env_set = [ "ELASTICSEARCH_URL" ], env = { "TEST_SUITE" = "xpack" } }
command = "cargo"
args = ["test", "-p", "elasticsearch"]
dependencies = ["start-elasticsearch"]

[tasks.run-api-generator]
category = "Elasticsearch"
private = true
command = "cargo"
args = ["run", "-p", "api_generator"]

[tasks.create-test-results-dir]
category = "Elasticsearch"
private = true
condition = { env_set = [ "CI" ] }
script = ["[ -d test_results ] || mkdir -p test_results"]

[tasks.install-cargo2junit]
category = "Elasticsearch"
private = true
script = ["cargo install cargo2junit"]

[tasks.convert-test-results-junit]
category = "Elasticsearch"
private = true
condition = { env_set = [ "CI" ] }
script = ["cat test_results/results.json | cargo2junit > test_results/cargo-junit.xml"]
dependencies = ["install-cargo2junit"]

# ============
# Public tasks
# ============

[tasks.start-elasticsearch]
category = "Elasticsearch"
description = "Starts Elasticsearch docker container with the given version and distribution"
condition = { env_set = [ "STACK_VERSION", "TEST_SUITE" ], env_not_set = ["CI"] }
script = ["DETACH=true bash .ci/run-elasticsearch.sh"]
dependencies = ["set-oss-env", "set-xpack-env"]

[tasks.start-elasticsearch.windows]
script = ["bash -c \"STACK_VERSION=%STACK_VERSION% TEST_SUITE=%TEST_SUITE% DETACH=true bash .ci/run-elasticsearch.sh\""]

[tasks.stop-elasticsearch]
category = "Elasticsearch"
description = "Stops Elasticsearch docker container, if running"
condition = { env_set = [ "STACK_VERSION", "TEST_SUITE" ], env_not_set = ["CI"] }
script = ["CLEANUP=true bash .ci/run-elasticsearch.sh"]
dependencies = ["set-oss-env", "set-xpack-env"]

[tasks.stop-elasticsearch.windows]
script = ["bash -c \"STACK_VERSION=%STACK_VERSION% TEST_SUITE=%TEST_SUITE% CLEANUP=true bash .ci/run-elasticsearch.sh\""]

[tasks.test-yaml]
category = "Elasticsearch"
description = "Generates and runs yaml_test_runner package xpack/oss tests against a given Elasticsearch version"
condition = { env_set = [ "STACK_VERSION", "TEST_SUITE" ] }
dependencies = ["generate-yaml-tests", "create-test-results-dir", "test-yaml-test-runner", "test-yaml-test-runner-ci", "convert-test-results-junit"]
run_task = "stop-elasticsearch"

[tasks.test-generator]
category = "Elasticsearch"
clear = true
description = "Runs api_generator tests"
command = "cargo"
args = ["test", "-p", "api_generator"]

[tasks.test]
category = "Elasticsearch"
clear = true
description = "Runs elasticsearch package tests against a given Elasticsearch version"
env = { "TEST_SUITE" = { value = "xpack", condition = { env_set = ["TEST_SUITE"] } } }
dependencies = ["test-elasticsearch"]
run_task = "stop-elasticsearch"

[tasks.generate-yaml-tests]
category = "Elasticsearch"
description = "Generates Elasticsearch client tests from YAML tests"
dependencies = ["run-yaml-test-runner"]
run_task = "format"

[tasks.generate-api]
category = "Elasticsearch"
description = "Generates Elasticsearch client from REST API specs"
dependencies = ["run-api-generator"]
run_task = "format"


[tasks.default]
clear = true
script = ['''
    echo
    echo "Main tasks:"
    echo "- generate-api: Generates Elasticsearch client from REST API specs"
    echo "- start-elasticsearch: Starts Elasticsearch docker container with the given version and distribution"
    echo "- stop-elasticsearch: Stops Elasticsearch docker container, if running"
    echo "- test-yaml: Generates and runs yaml_test_runner package xpack/oss tests against a given Elasticsearch version"
    echo "- test-generator: Generates and runs api_generator package tests"
    echo "- test: Runs elasticsearch package tests against a given Elasticsearch version"
    echo
    echo "Most tasks use these environment variables:"
    echo "- STACK_VERSION (default '$STACK_VERSION'): the version of Elasticsearch"
    echo "- TEST_SUITE ('oss' or 'xpack', default '$TEST_SUITE'): the distribution of Elasticsearch"
    echo "- CI (default not set): set when running on CI to determine whether to start Elasticsearch and format test output as JSON"
    echo
    echo "Run 'cargo make --list-all-steps' for a complete list of available tasks."
    echo
''']

[tasks.default.windows]
script = ['''
    @echo off
    echo.
    echo Main tasks:
    echo - generate-api: Generates Elasticsearch client from REST API specs
    echo - start-elasticsearch: Starts Elasticsearch docker container with the given version and distribution
    echo - stop-elasticsearch: Stops Elasticsearch docker container, if running
    echo - test-yaml: Generates and runs yaml_test_runner package xpack/oss tests against a given Elasticsearch version
    echo - test-generator: Generates and runs api_generator package tests
    echo - test: Runs elasticsearch package tests against a given Elasticsearch version
    echo.
    echo Most tasks use these environment variables:
    echo - STACK_VERSION (default '$STACK_VERSION'): the version of Elasticsearch
    echo - TEST_SUITE ('oss' or 'xpack', default '$TEST_SUITE'): the distribution of Elasticsearch
    echo - CI (default not set): set when running on CI to determine whether to start Elasticsearch and format test output as JSON
    echo.
    echo Run 'cargo make --list-all-steps' for a complete list of available tasks.
    echo.
''']